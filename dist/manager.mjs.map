{"version":3,"sources":["../src/manager.ts","../src/constants.ts","../src/Tool.tsx","../src/components/badges-toolbar.component.tsx","../src/components/badge.component.tsx","../src/config.ts","../src/components/badge-tooltip-wrapper.component.tsx"],"names":["addons","types","ADDON_ID","TOOL_ID","ADDON_TITLE","PARAM_CONFIG_KEY","PARAM_BADGES_KEY","useStorybookApi","React","Separator","styled","defaultBadgesConfig","defaultBadgeConfig","WithTooltip","TooltipMessage","BadgeTooltipWrapper","tooltip","children","tooltipMessage","StyledBadge","styles","Badge","badge","customBadgesConfig","config","Component","BadgesWrapper","theme","BadgesToolbar","badges","Tool"],"mappings":"AAAA,OAAQ,UAAAA,EAAQ,SAAAC,MAAY,yBCArB,IAAMC,EAAW,yCACXC,EAAUD,EAEVE,EAAc,yBACdC,EAAmB,eACnBC,EAAmB,SCmBhC,OAAQ,mBAAAC,MAAsB,yBAC9B,OAAOC,MAAW,QCzBlB,OAAOA,MAAiB,QACxB,OAAQ,aAAAC,MAAgB,wBACxB,OAAQ,UAAAC,MAAa,qBCFrB,OAAOF,MAAiB,QACxB,OAAQ,UAAAE,MAAa,qBCEd,IAAMC,EAAoC,CAC5C,QAAgB,CACb,MAAO,OACX,EACC,KAAa,CACV,MAAO,OACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,EACC,OAAe,CACZ,MAAO,SACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,EACC,iBAAuB,CACpB,MAAO,iBACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,EACC,SAAiB,CACd,MAAO,WACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,EACC,aAAqB,CAClB,MAAO,eACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,EACC,WAAmB,CAChB,MAAO,aACP,OAAQ,CACJ,gBAAiB,UACjB,YAAa,UACb,MAAO,SACX,CACJ,CACJ,EAEaC,EAAkCD,EAAoB,QCzDnE,OAAOH,MAAW,QAClB,OAAQ,eAAAK,EAAa,kBAAAC,MAAqB,wBAUnC,IAAMC,EAAoD,CAAC,CAAC,QAAAC,EAAS,SAAAC,CAAQ,IAAM,CAMtF,IAAMC,EAAiBV,EAAA,cAACM,EAAA,CAAgB,GAJX,OAAOE,GAAY,SAC1C,CAAC,KAAMA,CAAO,EACdA,EAE0D,EAEhE,OACIR,EAAA,cAACK,EAAA,CAAY,QAASK,GACjBD,CACL,CAER,EFjBA,OAAQ,mBAAAV,MAAsB,yBAQvB,IAAMY,EAAcT,EAAO,KAC9B,CAAC,CAAC,OAAQ,CAAC,OAAAU,CAAM,CAAC,KAAO,CACrB,YAAaA,GAAQ,aAAe,UACpC,aAAcA,GAAQ,cAAgB,MACtC,YAAaA,GAAQ,aAAe,QACpC,YAAaA,GAAQ,aAAe,MACpC,MAAOA,GAAQ,OAAS,UACxB,gBAAiBA,GAAQ,iBAAmB,UAC5C,SAAUA,GAAQ,UAAY,WAC9B,WAAYA,GAAQ,YAAc,UAClC,WAAYA,GAAQ,YAAc,OAClC,WAAYA,GAAQ,YAAc,IAClC,cAAeA,GAAQ,eAAiB,YACxC,cAAeA,GAAQ,eAAiB,MACxC,aAAcA,GAAQ,cAAgB,MACtC,QAAS,OACb,EACJ,EAOaC,EAAwB,CAAC,CAAC,MAAAC,CAAK,IAAM,CAE9C,IAAMC,EADMhB,EAAgB,EACG,oBAAkCF,CAAgB,GAAK,CAAC,EAQjFmB,EALe,CACjB,GAAGb,EACH,GAAGY,CACP,EAE4BD,CAAK,GAAKV,EAEhCa,EAAY,IACdjB,EAAA,cAACW,EAAA,CAAY,OAAQK,GAChBA,EAAO,KACZ,EAGJ,OAAIA,EAAO,QAEHhB,EAAA,cAACO,EAAA,CAAoB,QAASS,EAAO,SACjChB,EAAA,cAACiB,EAAA,IAAS,CACd,EAKJjB,EAAA,cAACiB,EAAA,IAAS,CAElB,ED/DA,IAAMC,EAAgBhB,EAAO,IACzB,CAAC,CAAC,MAAAiB,CAAK,KAAO,CACV,IAAKA,EAAM,aACX,cAAeA,EAAM,aAAe,EACpC,QAAS,OACT,WAAY,QAChB,EACJ,EAMaC,EAAwC,CAAC,CAAC,OAAAC,CAAM,IACzDA,EAAO,OAAS,EAAIrB,EAAA,cAAAA,EAAA,cAChBA,EAAA,cAACC,EAAA,IAAS,EACVD,EAAA,cAACkB,EAAA,KACIG,EAAO,IAAKP,GACTd,EAAA,cAACa,EAAA,CAAM,IAAKC,EAAO,MAAOA,EAAM,CACnC,CACL,EACAd,EAAA,cAACC,EAAA,IAAS,CACd,EAAM,KDGH,IAAMqB,EAAO,UAAuB,CAEvC,IAAMD,EADMtB,EAAgB,EACT,oBAA8BD,CAAgB,GAAK,CAAC,EAEvE,OACIE,EAAA,cAACoB,EAAA,CAAc,OAAQC,EAAO,CAGtC,EFjCA7B,EAAO,SAASE,EAAU,IAAM,CAE9BF,EAAO,IAAIG,EAAS,CAClB,KAAMF,EAAM,KACZ,SAAUK,EACV,MAAOF,EACP,MAAO,IAAM,GACb,OAAQ0B,CACV,CAAC,CACH,CAAC","sourcesContent":["import {addons, types} from \"@storybook/manager-api\";\r\nimport {ADDON_ID, ADDON_TITLE, PARAM_BADGES_KEY, TOOL_ID} from \"./constants\";\r\nimport {Tool} from \"./Tool\";\r\n\r\n// Register the addon\r\naddons.register(ADDON_ID, () => {\r\n  // Register the tool\r\n  addons.add(TOOL_ID, {\r\n    type: types.TOOL,\r\n    paramKey: PARAM_BADGES_KEY,\r\n    title: ADDON_TITLE,\r\n    match: () => true,\r\n    render: Tool,\r\n  });\r\n});\r\n","export const ADDON_ID = '@geometricpanda/storybook-addon-badges';\r\nexport const TOOL_ID = ADDON_ID;\r\n\r\nexport const ADDON_TITLE = 'Storybook Addon Badges';\r\nexport const PARAM_CONFIG_KEY = 'badgesConfig';\r\nexport const PARAM_BADGES_KEY = 'badges';\r\n\r\nexport enum BADGE {\r\n    DEFAULT = 'default',\r\n    BETA = 'beta',\r\n    STABLE = 'stable',\r\n    NEEDS_REVISION = 'needs-revision',\r\n    OBSOLETE = 'obsolete',\r\n    EXPERIMENTAL = 'experimental',\r\n    DEPRECATED = 'deprecated',\r\n}\r\n","//\r\n// export const Tool = memo(function MyAddonSelector() {\r\n//   const [globals, updateGlobals] = useGlobals();\r\n//\r\n//   const isActive = [true, \"true\"].includes(globals[PARAM_KEY]);\r\n//\r\n//   const toggleMyTool = useCallback(() => {\r\n//     updateGlobals({\r\n//       [PARAM_KEY]: !isActive,\r\n//     });\r\n//   }, [isActive]);\r\n//\r\n//   return (\r\n//     <IconButton\r\n//       key={TOOL_ID}\r\n//       active={isActive}\r\n//       title=\"Enable my addon\"\r\n//       onClick={toggleMyTool}\r\n//     >\r\n//       <Icons icon=\"lightning\" />\r\n//     </IconButton>\r\n//   );\r\n// });\r\n\r\nimport {useStorybookApi} from \"@storybook/manager-api\";\r\nimport React from \"react\";\r\n\r\nimport {PARAM_BADGES_KEY} from \"./constants\";\r\nimport {BadgesToolbar} from \"./components\";\r\n\r\nexport const Tool = function AddonBadges() {\r\n    const api = useStorybookApi();\r\n    const badges = api.getCurrentParameter<string[]>(PARAM_BADGES_KEY) || [];\r\n\r\n    return (\r\n        <BadgesToolbar badges={badges}/>\r\n    )\r\n\r\n};\r\n","import React, {FC} from 'react';\r\nimport {Separator} from '@storybook/components';\r\nimport {styled} from '@storybook/theming';\r\nimport {Badge} from './badge.component';\r\n\r\nconst BadgesWrapper = styled.div(\r\n    ({theme}) => ({\r\n        gap: theme.layoutMargin,\r\n        paddingInline: theme.layoutMargin / 2,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    })\r\n);\r\n\r\ninterface BadgesToolbarProps {\r\n    badges: Array<string>;\r\n}\r\n\r\nexport const BadgesToolbar: FC<BadgesToolbarProps> = ({badges}) => \r\n    badges.length > 0 ? <>\r\n        <Separator/>\r\n        <BadgesWrapper>\r\n            {badges.map((badge) => (\r\n                <Badge key={badge} badge={badge}/>\r\n            ))}\r\n        </BadgesWrapper>\r\n        <Separator/>\r\n    </> : null; \r\n\r\n","import React, {FC} from 'react';\r\nimport {styled} from '@storybook/theming';\r\n// import {useParameter} from \"@storybook/api\";\r\n\r\nimport {defaultBadgeConfig, defaultBadgesConfig} from \"../config\";\r\nimport {BadgeTooltipWrapper} from './badge-tooltip-wrapper.component';\r\nimport type {BadgeConfig} from \"../typings.interface\";\r\nimport {useStorybookApi} from \"@storybook/manager-api\";\r\nimport {BadgesConfig} from \"../typings.interface\";\r\nimport {PARAM_CONFIG_KEY} from \"../constants\";\r\n\r\nexport interface StyledBadgeProps {\r\n    config: BadgeConfig;\r\n}\r\n\r\nexport const StyledBadge = styled.span<StyledBadgeProps>(\r\n    ({config: {styles}}) => ({\r\n        borderColor: styles?.borderColor || '#474D66',\r\n        borderRadius: styles?.borderRadius || '3px',\r\n        borderStyle: styles?.borderStyle || 'solid',\r\n        borderWidth: styles?.borderWidth || '1px',\r\n        color: styles?.color || '#474D66',\r\n        backgroundColor: styles?.backgroundColor || '#EDEFF5',\r\n        fontSize: styles?.fontSize || '0.625rem',\r\n        fontFamily: styles?.fontFamily || 'inherit',\r\n        fontWeight: styles?.fontWeight || 'bold',\r\n        lineHeight: styles?.lineHeight || '1',\r\n        textTransform: styles?.textTransform || 'uppercase',\r\n        paddingInline: styles?.paddingInline || '5px',\r\n        paddingBlock: styles?.paddingBlock || '2px',\r\n        display: 'block'\r\n    })\r\n);\r\n\r\n\r\nexport interface BadgeProps {\r\n    badge: string;\r\n}\r\n\r\nexport const Badge: FC<BadgeProps> = ({badge}) => {\r\n    const api = useStorybookApi();\r\n    const customBadgesConfig = api.getCurrentParameter<BadgesConfig>(PARAM_CONFIG_KEY) || {};\r\n\r\n\r\n    const badgesConfig = {\r\n        ...defaultBadgesConfig,\r\n        ...customBadgesConfig,\r\n    };\r\n\r\n    const config = badgesConfig[badge] || defaultBadgeConfig;\r\n\r\n    const Component = () => (\r\n        <StyledBadge config={config}>\r\n            {config.title}\r\n        </StyledBadge>\r\n    )\r\n\r\n    if (config.tooltip) {\r\n        return (\r\n            <BadgeTooltipWrapper tooltip={config.tooltip}>\r\n                <Component/>\r\n            </BadgeTooltipWrapper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Component/>\r\n    )\r\n}\r\n","import {BadgeConfig, BadgesConfig} from \"./typings.interface\";\r\nimport {BADGE} from \"./constants\";\r\n\r\nexport const defaultBadgesConfig: BadgesConfig = {\r\n    [BADGE.DEFAULT]: {\r\n        title: 'Badge',\r\n    },\r\n    [BADGE.BETA]: {\r\n        title: 'Beta',\r\n        styles: {\r\n            backgroundColor: '#D6E0FF',\r\n            borderColor: '#2952CC',\r\n            color: '#2952CC',\r\n        },\r\n    },\r\n    [BADGE.STABLE]: {\r\n        title: 'Stable',\r\n        styles: {\r\n            backgroundColor: '#DCF2EA',\r\n            borderColor: '#317159',\r\n            color: '#317159',\r\n        },\r\n    },\r\n    [BADGE.NEEDS_REVISION]: {\r\n        title: 'Needs Revision',\r\n        styles: {\r\n            backgroundColor: '#FFEFD2',\r\n            borderColor: '#66460D',\r\n            color: '#66460D',\r\n        },\r\n    },\r\n    [BADGE.OBSOLETE]: {\r\n        title: 'Obsolete',\r\n        styles: {\r\n            backgroundColor: '#F9DADA',\r\n            borderColor: '#7D2828',\r\n            color: '#7D2828',\r\n        },\r\n    },\r\n    [BADGE.EXPERIMENTAL]: {\r\n        title: 'Experimental',\r\n        styles: {\r\n            backgroundColor: '#E7E4F9',\r\n            borderColor: '#6E62B6',\r\n            color: '#6E62B6',\r\n        },\r\n    },\r\n    [BADGE.DEPRECATED]: {\r\n        title: 'Deprecated',\r\n        styles: {\r\n            backgroundColor: '#F8E3DA',\r\n            borderColor: '#85462B',\r\n            color: '#85462B',\r\n        },\r\n    },\r\n};\r\n\r\nexport const defaultBadgeConfig: BadgeConfig = defaultBadgesConfig[BADGE.DEFAULT];\r\n","import React from 'react';\r\nimport {WithTooltip, TooltipMessage} from '@storybook/components';\r\n\r\nimport type {FC, ReactNode} from 'react';\r\nimport type {TooltipConfig} from \"../typings.interface\";\r\n\r\nexport interface BadgeTooltipWrapperProps {\r\n    children: ReactNode;\r\n    tooltip: TooltipConfig;\r\n}\r\n\r\nexport const BadgeTooltipWrapper: FC<BadgeTooltipWrapperProps> = ({tooltip, children}) => {\r\n\r\n    const tooltipMessageProps = (typeof tooltip === 'string')\r\n        ? {desc: tooltip}\r\n        : tooltip;\r\n\r\n    const tooltipMessage = <TooltipMessage {...tooltipMessageProps} />;\r\n\r\n    return (\r\n        <WithTooltip tooltip={tooltipMessage}>\r\n            {children}\r\n        </WithTooltip>\r\n    )\r\n};\r\n"]}